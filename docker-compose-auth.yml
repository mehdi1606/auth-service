version: '3.8'

networks:
  auth-network:
    driver: bridge

volumes:
  postgres-auth-data:

services:
  postgres-auth:
    image: postgres:15-alpine
    container_name: postgres-auth-standalone
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: user_user
      POSTGRES_PASSWORD: user_pass
    ports:
      - "5437:5432"
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
    networks:
      - auth-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_user -d user_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis-auth
    ports:
      - "6379:6379"
    networks:
      - auth-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-auth
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - auth-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper-auth
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - auth-network

  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth-service
    depends_on:
      postgres-auth:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-auth:5432/user_db
      SPRING_DATASOURCE_USERNAME: user_user
      SPRING_DATASOURCE_PASSWORD: user_pass
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_REDIS_HOST: redis
      JWT_SECRET: dev-secret-key-change-in-production-minimum-256-bits
    networks:
      - auth-network
    restart: unless-stopped
