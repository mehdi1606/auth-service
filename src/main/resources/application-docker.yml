spring:
  config:
    activate:
      on-profile: docker

  datasource:
    url: jdbc:postgresql://postgres-auth:5432/user_db
    username: user_user
    password: user_pass
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 10
      connection-timeout: 30000

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  kafka:
    bootstrap-servers: kafka:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3

  # ✅ CORRECTION: Utilisez "data.redis" pas juste "redis"
  data:
    redis:
      host: redis
      port: 6379
      timeout: 2000ms

  # Configuration email pour Docker
  mail:
    host: ${SPRING_MAIL_HOST:smtp.gmail.com}
    port: ${SPRING_MAIL_PORT:587}
    username: ${SPRING_MAIL_USERNAME}
    password: ${SPRING_MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH:true}
          starttls:
            enable: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE:true}

server:
  port: 8081

# ✅ CORRECTION: Secret JWT sécurisé (512 bits / 64+ caractères)
jwt:
  secret: ${JWT_SECRET:7xK9mP2nQ5wR8tY3uV6zA1bC4dE7fG0hI2jK5lM8nO1pQ4rS7tU0vW3xY6zA9bB2cD5eF8gH1iJ4kL7mN0oP3qR6sT9uV2wX5yZ8aB1cD4eE7fF0gG3hH6iI9jJ2kK5lL8mM1nN4oO7pP0qQ3rR6sS9tT2uU5vV8wW1xX4yY7zZ0aA3b}
  access-token-expiration: 900000
  refresh-token-expiration: 604800000
  mfa-temp-token-expiration: 300000
  issuer: stock-management-auth-service

# Configuration de l'application
app:
  base-url: ${APP_BASE_URL:http://localhost:8081}

logging:
  level:
    root: INFO
    com.stock.authservice: INFO
    org.springframework.security: INFO

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

# Configuration Eureka pour Docker (DÉSACTIVÉ temporairement)
eureka:
  client:
    enabled: false
    register-with-eureka: false
    fetch-registry: false
